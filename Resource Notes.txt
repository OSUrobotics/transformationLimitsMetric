Resources, notes, and snippets:
STL manipulation
* https://www.mathworks.com/matlabcentral/fileexchange/51200-stltools
Find intersection of triangulated surfaces -- Only finds the line of intersection, which is lame
* https://www.mathworks.com/matlabcentral/fileexchange/48613-surface-intersection
Find volume of triangulated surfaces
* https://www.mathworks.com/matlabcentral/fileexchange/26982-volume-of-a-surface-triangulation
Uniform sampling sphere
* http://www.mathworks.com/matlabcentral/fileexchange/37004-suite-of-functions-to-perform-uniform-sampling-of-a-sphere
Generating Volumes (Voxels)
* http://www.mathworks.com/matlabcentral/fileexchange/24086-polygon2voxel
Make stuff faster
* http://www.ee.columbia.edu/~marios/matlab/Writing_Fast_MATLAB_Code.pdf
Transformation matrix to quaternion
* https://www.mathworks.com/matlabcentral/fileexchange/1176-quaternion-toolbox/content/quaternions/dcm2q.m
Notes:
We will only need to deal with rotation and translation of matrices.
Transformations are applied in right to left order- to transform point A by first rotating then translating it, it would be A*T*R
Translating (moving) points can be done with a fake 4d pt value, this method of transforming is called Affine transformations (http://metalbyexample.com/linear-algebra/)
 Alternatively, subtract or add the values directly.
When rotating a figure around a non-origin point, need to translate the centerpoint to the origin, then rotate, then untranslate. (http://mathforum.org/library/drmath/view/69806.html)
All translations need to be done only on the vertex matrix, since the facet matrix is only the normal vector to the plane (how it's rotated in space), with the location of it being defined by the vertex values.